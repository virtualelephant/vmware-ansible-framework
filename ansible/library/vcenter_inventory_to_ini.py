#!/usr/bin/env python3
"""
vc_inventory_to_ini.py

Connects to a vCenter Server and generates an Ansible-style inventory.ini
with cluster groups and their ESXi hosts, plus an [esxi_hosts:children] group.

Example:
  [esxi_hosts:children]
  cluster01
  cluster02

  [cluster01]
  esxi01.home.virtualelephant.com
  esxi02.home.virtualelephant.com

Usage:
  python vc_inventory_to_ini.py --vcenter vcenter.home --user 'administrator@vsphere.local' --password-file /path/secret \
      --outfile ansible/inventories/inventory.ini

Environment variables (optional):
  VCENTER_HOST, VCENTER_USER, VCENTER_PASSWORD, VCENTER_INSECURE=true|false

Requires: pyvmomi  (pip install pyvmomi)
"""

import argparse
import collections
import os
import re
import ssl
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple

try:
    from pyVim.connect import SmartConnect, Disconnect
    from pyVmomi import vim  # type: ignore
except Exception as e:
    print("FATAL: pyvmomi is required. Install with 'pip install pyvmomi'.", file=sys.stderr)
    raise

# ----------------------------- Helpers -----------------------------

def sanitize_group(name: str) -> str:
    """Make a safe Ansible group name (lowercase, [A-Za-z0-9_])."""
    s = name.strip().lower()
    s = re.sub(r"[^A-Za-z0-9_]+", "_", s)
    s = re.sub(r"_+", "_", s).strip("_")
    if not s:
        s = "group"
    if s[0].isdigit():
        s = f"c_{s}"
    return s

def read_secret(path: Path) -> str:
    data = path.read_text(encoding="utf-8").strip()
    if not data:
        raise ValueError(f"Password file {path} is empty.")
    return data

def connect_vcenter(host: str, user: str, password: str, insecure: bool = True):
    ctx = None
    if insecure:
        ctx = ssl.create_default_context()
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE
    return SmartConnect(host=host, user=user, pwd=password, sslContext=ctx)

def get_clusters_and_hosts(si) -> Dict[str, List[str]]:
    """Return mapping {cluster_name: [host_fqdns...]}"""
    content = si.RetrieveContent()
    view_mgr = content.viewManager
    container = view_mgr.CreateContainerView(content.rootFolder, [vim.ClusterComputeResource], True)
    clusters = list(container.view)
    result: Dict[str, List[str]] = {}
    for cl in clusters:
        try:
            cl_name = cl.name
        except Exception:
            cl_name = "unknown_cluster"
        hosts = []
        for h in getattr(cl, "host", []) or []:
            hostname = None
            # Prefer FQDN if available
            try:
                # host.summary.config.name is often FQDN
                hostname = h.summary.config.name
            except Exception:
                pass
            if not hostname:
                try:
                    hostname = h.name
                except Exception:
                    hostname = None
            if hostname:
                hosts.append(str(hostname).strip())
        # de-dup & sort
        hosts = sorted(list(dict.fromkeys(hosts)))
        result[cl_name] = hosts
    container.Destroy()
    return result

def build_ini(vcenter: str, mapping: Dict[str, List[str]]) -> str:
    # Handle duplicate cluster names after sanitization
    safe_map: Dict[str, Tuple[str, List[str]]] = {}  # safe -> (original, hosts)
    counts = collections.Counter()
    for original, hosts in mapping.items():
        base = sanitize_group(original)
        counts[base] += 1
        safe = base if counts[base] == 1 else f"{base}_{counts[base]}"
        safe_map[safe] = (original, hosts)

    lines: List[str] = []
    lines.append(f"; Generated by vc_inventory_to_ini.py on {datetime.utcnow().isoformat(timespec='seconds')}Z")
    lines.append(f"; Source vCenter: {vcenter}")
    lines.append("")

    # Children header
    lines.append("[esxi_hosts:children]")
    for group in sorted(safe_map.keys()):
        lines.append(group)
    lines.append("")

    # Cluster groups
    for safe_group in sorted(safe_map.keys()):
        original, hosts = safe_map[safe_group]
        lines.append(f"[{safe_group}]  ; cluster: {original}")
        if hosts:
            for h in hosts:
                lines.append(h)
        else:
            lines.append("; (no hosts found)")
        lines.append("")

    return "\n".join(lines).rstrip() + "\n"

def write_if_changed(path: Path, content: str) -> bool:
    """Write file only if content changed. Return True if updated."""
    if path.exists():
        existing = path.read_text(encoding="utf-8")
        if existing == content:
            return False
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content, encoding="utf-8")
    return True

# ----------------------------- CLI -----------------------------

def parse_args():
    p = argparse.ArgumentParser(description="Generate inventory.ini from vCenter clusters/hosts")
    p.add_argument("--vcenter", default=os.getenv("VCENTER_HOST"), required=False, help="vCenter hostname or IP")
    p.add_argument("--user", default=os.getenv("VCENTER_USER"), required=False, help="vCenter username")
    pw_group = p.add_mutually_exclusive_group(required=False)
    pw_group.add_argument("--password", default=os.getenv("VCENTER_PASSWORD"), help="vCenter password")
    pw_group.add_argument("--password-file", help="Path to file containing password")
    p.add_argument("--verify-ssl", action="store_true", help="Verify SSL certificates (default: disabled)")
    p.add_argument("--outfile", type=Path, help="Path to write inventory.ini (if omitted, prints to stdout)")
    p.add_argument("--dry-run", action="store_true", help="Do not write file; print to stdout instead")
    return p.parse_args()

def main():
    args = parse_args()
    if not args.vcenter or not args.user or (not args.password and not args.password_file):
        print("ERROR: --vcenter, --user, and (--password or --password-file) are required (or set VCENTER_* env vars).", file=sys.stderr)
        sys.exit(2)

    password = args.password
    if not password and args.password_file:
        password = read_secret(Path(args.password_file))

    si = None
    try:
        si = connect_vcenter(args.vcenter, args.user, password, insecure=(not args.verify-ssl))
        mapping = get_clusters_and_hosts(si)
    finally:
        if si:
            try:
                Disconnect(si)
            except Exception:
                pass

    content = build_ini(args.vcenter, mapping)

    if args.dry_run or not args.outfile:
        print(content)
        return

    updated = write_if_changed(args.outfile, content)
    if updated:
        print(f"Wrote updated inventory to: {args.outfile}")
    else:
        print(f"No changes. Inventory already up-to-date: {args.outfile}")

if __name__ == "__main__":
    main()
