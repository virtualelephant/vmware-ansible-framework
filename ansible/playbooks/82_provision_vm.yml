---
- name: Provision empty VMs (no template) in vCenter
  hosts: localhost
  gather_facts: false

  collections:
    - community.vmware

  vars:
    # Override via: -e vms_config_file=ansible/vars/empty_vms.yml
    vms_config_file: "ansible/vars/empty_vms.yml"

  tasks:
    - name: Load vCenter and VM vars
      include_vars:
        file: "{{ vms_config_file }}"

    - name: Assert required vars
      assert:
        that:
          - vcenter_server is defined
          - vcenter_username is defined
          - vcenter_password is defined
          - vcenter_datacenter is defined
          - vms is defined
        fail_msg: "Missing one or more required variables (see example vars file)."

    - name: Query vCenter for each desired VM (skip if exists)
      community.vmware.vmware_guest_info:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ vcenter_validate_certs | default(false) }}"
        datacenter: "{{ vcenter_datacenter }}"
        name: "{{ item.name }}"
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"
      register: vm_info
      failed_when: false
      delegate_to: localhost

    - name: Build existence map
      set_fact:
        vm_exists_map: >-
          {{
            (vm_exists_map | default({}))
            | combine({
                item.item.name: (
                  (item is defined) and
                  (item.failed is not defined or item.failed == false) and
                  (item.instance is defined) and
                  (item.instance is not none)
                )
              })
          }}
      loop: "{{ vm_info.results }}"

    - name: Create empty VM (no template)
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ vcenter_validate_certs | default(false) }}"
        datacenter: "{{ vcenter_datacenter }}"
        folder: "{{ item.folder | default(omit) }}"
        cluster: "{{ item.cluster }}"
        resource_pool: "{{ item.resource_pool | default(omit) }}"
        name: "{{ item.name }}"
        state: present
        guest_id: "{{ item.guest_id }}"     # e.g., ubuntu64Guest, windows2019srv_64Guest
        datastore: "{{ item.datastore }}"
        hardware:
          num_cpus: "{{ item.vcpu }}"
          memory_mb: >-
            {{
              (item.memory_mb | default((item.memory_gb | default(0)) * 1024)) | int
            }}
          firmware: "{{ item.firmware | default(omit) }}"   # 'efi' or 'bios'
        scsi:
          type: "{{ item.scsi_type | default(omit) }}"      # e.g., 'paravirtual'
        disk:
          - size_gb: "{{ item.disk_gb }}"                   # primary system disk
            type: "{{ item.disk_type | default('thin') }}"  # thin|thick|eagerzeroedthick
            autoselect_datastore: false
        networks:
          - name: "{{ item.network }}"
            type: distributed
            start_connected: true
        # Optional CDROM/ISO attach for manual OS install:
        cdrom:
          type: "{{ (item.iso_path is defined) | ternary('iso', omit) }}"
          iso_path: "{{ item.iso_path | default(omit) }}"   # '[datastore1] iso/ubuntu-24.04.iso'
          controller_number: 0
          unit_number: 0
        annotation: "{{ item.annotation | default('Provisioned empty VM for manual OS install') }}"
        power_on: "{{ item.power_on | default(false) }}"    # default: leave powered off
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"
      when: "not (vm_exists_map[item.name] | default(false))"
      delegate_to: localhost

    - name: Summary
      debug:
        msg:
          - "Existing VMs (skipped): {{ vm_exists_map | dict2items | selectattr('value') | map(attribute='key') | list }}"
          - "Requested VMs: {{ vms | map(attribute='name') | list }}"
