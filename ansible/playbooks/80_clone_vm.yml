---
- name: Clone missing VMs from template in vCenter
  hosts: localhost
  gather_facts: false
  vars:
    # Override at runtime with: -e vms_config_file=path/to/your.yml
    vms_config_file: "ansible/vars/vms.yml"

  collections:
    - community.vmware

  vars_prompt: []
  tasks:
    - name: Load VM definitions & vCenter vars
      include_vars:
        file: "{{ vms_config_file }}"

    - name: Assert required variables are present
      assert:
        that:
          - vcenter_server is defined
          - vcenter_username is defined
          - vcenter_password is defined
          - vcenter_datacenter is defined
          - default_template is defined
          - vms is defined
        fail_msg: "Missing one or more required variables (see example vars file)."

    - name: Query vCenter for existing VMs
      community.vmware.vmware_guest_info:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ vcenter_validate_certs | default(false) }}"
        datacenter: "{{ vcenter_datacenter }}"
        name: "{{ item.name }}"
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"
      register: vm_info_results
      failed_when: false  # Missing VM will not fail the play
      delegate_to: localhost

    - name: Build existence map of VMs
      set_fact:
        vm_exists_map: >-
          {{
            (vm_exists_map | default({}))
            | combine({
                item.item.name: (
                  (item is defined) and
                  (item.failed is not defined or item.failed == false) and
                  (item.instance is defined) and
                  (item.instance is not none)
                )
              })
          }}
      loop: "{{ vm_info_results.results }}"

    - name: Clone missing VMs from template
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ vcenter_validate_certs | default(false) }}"
        datacenter: "{{ vcenter_datacenter }}"
        cluster: "{{ item.cluster }}"
        name: "{{ item.name }}"
        state: present            # create if absent; we skip if present via 'when' below
        template: "{{ item.template | default(default_template) }}"
        datastore: "{{ item.datastore }}"
        hardware:
          num_cpus: "{{ item.vcpu }}"
          # Prefer memory_gb if provided; else memory_mb (power users)
          memory_mb: >-
            {{
              (item.memory_mb | default( (item.memory_gb | default(0)) * 1024 )) | int
            }}
        networks:
          - name: "{{ item.network }}"
            type: distributed
        power_on: true
        wait_for_ip_address: false
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"
      when: "not (vm_exists_map[item.name] | default(false))"
      delegate_to: localhost

    - name: Summary
      debug:
        msg:
          - "Existing VMs (skipped): {{ vm_exists_map | dict2items | selectattr('value') | map(attribute='key') | list }}"
          - "Created VMs: {{ vms | rejectattr('name', 'in', (vm_exists_map | dict2items | selectattr('value') | map(attribute='key') | list)) | map(attribute='name') | list }}"
