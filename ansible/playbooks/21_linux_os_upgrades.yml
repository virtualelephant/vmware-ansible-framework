---
- name: OS upgrade while skipping Kubernetes packages (no reboot)
  hosts: all
  become: true
  gather_facts: true

  vars:
    k8s_packages: [kubeadm, kubelet, kubectl]
    report_dir: reports

  pre_tasks:
    - name: Ensure supported OS family
      ansible.builtin.assert:
        that: ansible_os_family in ['Debian', 'RedHat']
        fail_msg: "This playbook supports Debian/Ubuntu and RHEL/CentOS-like systems only."

  tasks:
    # -----------------------------
    # Debian/Ubuntu
    # -----------------------------
    - name: Debian/Ubuntu | Hold Kubernetes packages (prevent upgrades)
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop: "{{ k8s_packages }}"
      when: ansible_os_family == 'Debian'

    - name: Debian/Ubuntu | Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == 'Debian'

    - name: Debian/Ubuntu | Full dist-upgrade (held packages will be skipped)
      ansible.builtin.apt:
        upgrade: dist
        autoremove: true
      register: debian_upgrade
      when: ansible_os_family == 'Debian'

    - name: Debian/Ubuntu | Check if reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: debian_reboot_flag
      when: ansible_os_family == 'Debian'

    # -----------------------------
    # RHEL/CentOS/Alma/Rocky
    # -----------------------------
    - name: RedHat | Upgrade all packages except Kubernetes ones
      ansible.builtin.yum:
        name: "*"
        state: latest
        update_only: true
        exclude: [ "kubeadm*", "kubelet*", "kubectl*" ]
      register: redhat_upgrade
      when: ansible_os_family == 'RedHat'

    - name: RedHat | Check if reboot is required (needs-restarting -r)
      ansible.builtin.command: needs-restarting -r
      register: rhel_needs_restarting
      changed_when: false
      failed_when: false
      when: ansible_os_family == 'RedHat'

    # -----------------------------
    # Mark results on each host
    # -----------------------------
    - name: Set per-host facts for upgrade + reboot requirement
      ansible.builtin.set_fact:
        os_upgrade_changed: >-
          {{
            (debian_upgrade is defined and debian_upgrade.changed) or
            (redhat_upgrade is defined and redhat_upgrade.changed)
          }}
        os_reboot_required: >-
          {{
            (ansible_os_family == 'Debian' and debian_reboot_flag.stat.exists | default(false)) or
            (ansible_os_family == 'RedHat' and rhel_needs_restarting.rc | default(0) == 1)
          }}

    - name: Build dynamic group of hosts needing reboot
      ansible.builtin.add_host:
        name: "{{ inventory_hostname }}"
        groups: needs_reboot
      when: os_reboot_required | bool

    # Optional visibility
    - name: Debug summary for this host
      ansible.builtin.debug:
        msg:
          host: "{{ inventory_hostname }}"
          os_family: "{{ ansible_os_family }}"
          upgraded_anything: "{{ os_upgrade_changed }}"
          reboot_required: "{{ os_reboot_required }}"

- name: Compile upgrade report (control node only)
  hosts: all
  gather_facts: false
  tasks:
    - name: Pick a single controller to write the report
      ansible.builtin.set_fact:
        _report_ts: "{{ lookup('ansible.builtin.pipe', 'date +%Y%m%d-%H%M%S') }}"
      run_once: true

    - name: Ensure report directory exists (control node)
      ansible.builtin.file:
        path: "{{ report_dir }}"
        state: directory
        mode: "0755"
      delegate_to: localhost
      run_once: true

    - name: Write report to control node
      ansible.builtin.copy:
        dest: "{{ report_dir }}/os_upgrade_report_{{ _report_ts }}.md"
        mode: "0644"
        content: |
          # OS Upgrade Report (no reboot)
          Generated: {{ _report_ts }}

          | Host | OS Family | Upgraded Anything | Reboot Required |
          |------|-----------|-------------------|-----------------|
          {% for h in ansible_play_hosts_all | sort %}
          | {{ h }} | {{ hostvars[h].ansible_facts.os_family | default('n/a') }} | {{ hostvars[h].os_upgrade_changed | default(false) }} | {{ hostvars[h].os_reboot_required | default(false) }} |
          {% endfor %}

          ## Notes
          - Kubernetes packages (`kubeadm`, `kubelet`, `kubectl`) were held/excluded and **not** upgraded.
          - No automatic reboot was performed.
      delegate_to: localhost
      run_once: true

    - name: Show where the report was saved
      ansible.builtin.debug:
        msg: "Report written to {{ report_dir }}/os_upgrade_report_{{ _report_ts }}.md"
      run_once: true
